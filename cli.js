// Generated by CoffeeScript 1.9.3
(function() {
  var commander, conf, crypto, e, fs, jsm, readline;

  commander = require('commander');

  jsm = require('./index.js');

  readline = require('readline');

  fs = require('fs');

  crypto = require('crypto');

  try {
    conf = jsm.readJsmClientConfig();
  } catch (_error) {
    e = _error;
    console.log(e.message);
    return;
  }

  commander.version('0.0.1').command('install [entry...]').alias('i').description('install snippets for given entry files, if omit entry, look for entries from jsm.json.').action(function(entry) {});

  commander.command('update [entry...]').alias('u').action(function(entry) {});

  commander.command('publish [entry]').alias('p').action(function(entryPath) {
    var entry;
    if (fs.existsSync(entryPath)) {
      entry = jsm.parseEntry(entryPath);
      if (conf.username && conf.pwdHash) {
        console.log("Pulish " + (entry.title + entry.version) + " to " + conf.username + "/" + (entry.title + entry.version) + "...");
        entry.author = conf.username;
        entry.content = fs.readFileSync(entryPath, {
          encoding: 'utf8'
        });
        return jsm.publish(conf, entry);
      } else {
        return console.log("run 'jsm config' to config user info before publish...");
      }
    } else {
      return console.log("Entry doesn't exist...");
    }
  });

  commander.command('config').alias('c').action(function() {
    var rl;
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return rl.question("Repository Address? (default: " + conf.repository + ")", function(repository) {
      if (repository) {
        conf.repository = repository;
      }
      return rl.question("Username? (default: " + conf.username + ")", function(username) {
        if (username) {
          conf.username = username;
        }
        return rl.question("Password? ", function(password) {
          var pwdHash, shasum;
          if (password !== "") {
            shasum = crypto.createHash('md5');
            shasum.update(password);
            pwdHash = shasum.digest('hex');
            pwdHash = pwdHash.toString('ascii');
            if (password) {
              conf.pwdHash = pwdHash;
            }
            jsm.writeJsmClientConfig(conf);
            console.log("Configure succeessful!");
            return rl.close();
          } else {
            return console.log('Configure failed, please run jsm config again...');
          }
        });
      });
    });
  });

  commander.parse(process.argv);

}).call(this);
