// Generated by CoffeeScript 1.9.3
(function() {
  var CONFIG_FILE_NAME, DEFAULT_REPOSITORY, LANGUAGE_EXT, configFile, fs, home, http, path, querystring, url;

  path = require('path');

  fs = require('fs');

  http = require('http');

  querystring = require('querystring');

  url = require('url');

  CONFIG_FILE_NAME = '.jsm.json';

  DEFAULT_REPOSITORY = 'http://jsm.winterland.me';

  LANGUAGE_EXT = {
    '.ls': 'livescript',
    '.coffee': 'coffeescript',
    '.js': 'javascript'
  };

  home = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  configFile = path.join(home, CONFIG_FILE_NAME);

  module.exports = {
    readJsmClientConfig: function() {
      var conf, f;
      if (fs.existsSync(configFile)) {
        f = fs.readFileSync(configFile, {
          encoding: 'utf8'
        });
        conf = JSON.parse(f);
        if (conf.repository && conf.username && conf.password) {
          return conf;
        } else {
          throw new Error("remove " + configFile + " and restart...");
        }
      } else {
        return {
          repository: DEFAULT_REPOSITORY,
          username: '',
          pwdHash: ''
        };
      }
    },
    writeJsmClientConfig: function(conf) {
      var f;
      return f = fs.writeFileSync(configFile, JSON.stringify(conf), {
        encoding: 'utf8'
      });
    },
    parseEntry: function(filePath) {
      var author, base, ext, title, version;
      filePath = path.normalize(filePath);
      ext = path.extname(filePath);
      base = path.basename(filePath, ext);
      author = path.dirname(base);
      if ((author.match(/\w*/))[0].length === 0) {
        author = void 0;
      }
      title = (base.match(/^([a-zA-Z]*)/))[0];
      version = (base.match(/([0-9]*)$/))[0];
      version = version.length ? parseInt(version) : 0;
      return {
        title: title,
        version: version,
        author: author,
        language: LANGUAGE_EXT[ext]
      };
    },
    publish: function(conf, entry) {
      var chunks, hostname, port, postData, ref, req;
      entry.pwdHash = conf.pwdHash;
      postData = querystring.stringify(entry);
      ref = url.parse(conf.repository), hostname = ref.hostname, port = ref.port;
      chunks = [];
      req = http.request({
        hostname: hostname,
        port: port,
        path: '/snippet',
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': postData.length
        }
      }, function(res) {
        res.on('data', function(data) {
          return chunks.push(data);
        });
        return res.on('end', function() {
          var e, snippet;
          try {
            snippet = JSON.parse(Buffer.concat(chunks).toString('utf8'));
            return console.log(snippet.author + "/" + (snippet.title + snippet.version) + " (revision" + snippet.revision + ") published succeessful!");
          } catch (_error) {
            e = _error;
            return console.log("publish failed!");
          }
        });
      });
      req.on('error', function(error) {
        console.log('Publish failed!:');
        return console.log(error);
      });
      req.write(postData);
      return req.end();
    }
  };

}).call(this);
